@*model LH_Vet._0._1.Models.Appointment*@
@model LH_Vet._0._1.Models.AppointmentsViewModel

@{
    ViewBag.Title = "Edit";
}

<h2>Edit</h2>


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    
    <div class="form-horizontal">
        <h4>Appointment</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @*Html.HiddenFor(model => model.Appointment.Id)*@
        @Html.HiddenFor(model => model.AppointmentId)

        <div class="form-group">
            @Html.LabelFor(model => model.StartTime, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.StartTime, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.StartTime, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.EndTime, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.EndTime, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.EndTime, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Patients, htmlAttributes: new { @class = "control-label col-md-2" })
          <div class="col-md-10">
            @*Html.EditorFor(model => model.EndTime, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.EndTime, "", new { @class = "text-danger" })*@
            @for (var i = 0; i < Model.Patients.Count; i++)
            {
              @* For now i will assume that if you put the attribute Checked on a model
      and it is a bool the framework will make a checkbox out of it.
      Or maybe if a bool is given to the code
      @Html.EditorFor(m => Model.Patients[i].Checked) then a checkbox is born.  *@
            <div>
              @Html.EditorFor(m => Model.Patients[i].Checked)
              @Html.DisplayFor(m => Model.Patients[i].Name)

              @Html.HiddenFor(m => Model.Patients[i].Name)
              @Html.HiddenFor(m => Model.Patients[i].Id)
            </div>
            }
          </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Save" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
